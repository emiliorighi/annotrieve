"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7602],{87602:function(e,t,i){i.d(t,{doConnect:function(){return s}});var a=i(87290),n=i(42382),r=i(61795);async function s(e){var t,i,s;let o=(0,n.getSession)(e);try{let t=(0,a.getConf)(e,"configJsonLocation"),n=JSON.parse(await (0,r.openLocation)(t).readFile("utf8")),l=(i=t.uri,s=t.baseUri,new URL(i,s).href);if(!function e(t,i){if("object"==typeof t&&null!==t)for(let a of Object.keys(t))"object"==typeof t[a]&&null!==t[a]?e(t[a],i):"uri"===a&&(t.baseUri=i.href)}(n,new URL(l)),n.assemblies)for(let e of n.assemblies)o.assemblyManager.get(e.name)||o.addSessionAssembly(e);n.tracks&&e.addTrackConfs(n.tracks),o.notify("Successfully loaded","success")}catch(i){console.error(i),o.notifyError(`${(0,a.getConf)(e,"name")}: "${i}"`,i),null===(t=o.breakConnection)||void 0===t||t.call(o,e.configuration)}}i(77565)},77565:function(e,t,i){i.d(t,{ve:function(){return o},lP:function(){return l},BD:function(){return h},h7:function(){return s}});class a{constructor(e=[],t){let i,a;this.data={};let{checkIndent:n=!0,skipValidation:r=!1}=t??{};for(let t of"string"==typeof e?e.trimEnd().split(/\r?\n/):e){if(""===t)throw Error("Invalid stanza, contained blank lines");if(t.trim().startsWith("#"))continue;if(t.trimEnd().endsWith("\\")){let e=t.trimEnd().slice(0,-1);a?a+=e.trimStart():a=e;continue}let e=t;if(a&&(e=a+e.trimStart(),a=void 0),i??n){let t=/^([ \t]+)/.exec(e);if(void 0===i)t?[,i]=t:i="";else if(""===i&&null!==t||i&&t&&i!==t[1])throw Error("Inconsistent indentation of stanza")}else i="";let r=e.trim(),s=r.indexOf(" ");if(-1===s){if(!this.nameKey)throw Error("First line in a stanza must have both a key and a value");if(this.data[r])continue;this.data[r]="";continue}let o=r.slice(0,s),l=r.slice(s+1);if(this.data[o]&&l!==this.data[o])throw Error(`Got duplicate key with a different value in stanza: "${o}" key has both ${this.data[o]} and ${l}`);this.nameKey||(this.nameKey=o,this.name=r.slice(s+1)),this.data[o]=l}r||this.validate()}validate(){}}class n{constructor(e=[],t){this.data={};let{checkIndent:i=!0,skipValidation:n=!1}=t??{};for(let t of"string"==typeof e?e.trimEnd().split(/(?:[\t ]*\r?\n){2,}/):e){if(""===t)throw Error("Invalid stanza, was empty");if(t.startsWith("include")||t.trim().startsWith("#")&&t.trimEnd().split(/\r?\n/).map(e=>e.trim()).every(e=>e.startsWith("#")))continue;let e=new a(t,{checkIndent:i});if(this.nameKey){if(e.nameKey!==this.nameKey)throw Error(`The first line in each stanza must have the same key. Saw both ${this.nameKey} and ${e.nameKey}`)}else this.nameKey=e.nameKey;if(!e.name)throw Error(`No stanza name: ${e.name}`);if(this.data[e.name])throw Error(`Got duplicate stanza name: ${e.name}`);this.data[e.name]=e}n||this.validate()}validate(){}}function r(e,t,i=""){let a=[];for(let i of t)e.data[i]||a.push(i);if(a.length>0)throw Error(`${i} is missing required entr${1===a.length?"y":"ies"}: ${a.join(", ")}`)}class s extends n{constructor(e,t){super(e,{...t,checkIndent:!1})}validate(){if("track"!==this.nameKey)throw Error(`trackDb has "${this.nameKey}" instead of "track" as the first line in each track`);for(let[e,t]of Object.entries(this.data)){let i=Object.keys(t.data);r(t,["track","shortLabel"],`Track ${e}`);let a=new Set(["superTrack","compositeTrack","container","view"]);if(!i.some(e=>a.has(e))){if(!i.includes("bigDataUrl"))throw Error(`Track ${e} is missing required key "bigDataUrl"`);if(!i.includes("type")&&!Object.keys(this.settings(e)).includes("type"))throw Error(`Neither track ${e} nor any of its parent tracks have the required key "type"`)}let n=e;do(n=this.data[n]?.parent)&&([n]=n.split(" "));while(n);let s=this.data[e];s&&(this.data[e]=s)}}settings(e){if(!this.data[e])throw Error(`Track ${e} does not exist`);let t=[e],i=e;do(i=this.data[i]?.parent)&&t.push(i);while(i);let a={};for(let e of(t.reverse(),t)){let t=this.data[e];if(t)for(let[e,i]of Object.entries(t))a[e]=i}return a}}class o extends n{validate(e=["genome","trackDb"]){if("genome"!==this.nameKey)throw Error('Genomes file must begin with a line like "genome <genome_name>"');for(let[t,i]of Object.entries(this.data))r(i,e,`genome ${t}`)}}class l extends a{validate(){r(this,["hub","shortLabel","longLabel","genomesFile","email"],"Hub file")}}class h{constructor(e){let[t,i,...n]=e.trimEnd().split(/(?:[\t ]*\r?\n){2,}/);this.hubData=new a(t),this.validateHub(),this.genome=new a(i),this.validateGenomeSection(),this.tracks=new s(n.join("\n\n"),{skipValidation:!1})}validateHub(){if("hub"!==this.hubData.nameKey)throw Error('Hub file must begin with a line like "hub <hub_name>"');r(this.hubData,["hub","shortLabel","longLabel","email"])}validateGenomeSection(){if("genome"!==this.genome.nameKey)throw Error('Genomes file must begin with a line like "genome <genome_name>"')}}}}]);