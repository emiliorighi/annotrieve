"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1822],{91822:function(t,e,a){a.d(e,{doConnect:function(){return b}});var i=a(77565),n=a(87290),r=a(42382),o=a(61795),s=a(81190),l=a(63168);async function c(t){let e=await (0,o.openLocation)(t).readFile("utf8");return new i.ve(e)}async function d(t){let e=await (0,o.openLocation)(t).readFile("utf8");return new i.h7(e)}function h(t,e){return{uri:new URL(t,new URL(e.uri,e.baseUri)).href,locationType:"UriLocation"}}function u(t,e,a){return t?h(t,a):h(e,a)}function m(t,e){return t?{uri:t,locationType:"LocalPath"}:{uri:e,locationType:"UriLocation"}}function f(t,e){return new URL(t,e).href}function p({trackDb:t,trackDbLoc:e,assemblyName:a,sequenceAdapter:i,baseUrl:n}){let o=new Set(["superTrack","compositeTrack","container","view"]);return Object.entries(t.data).map(([a,s])=>{var c;let{data:d}=s;if(!Object.keys(d).some(t=>o.has(t))){let o=[],d=a;do(d=(null===(c=t.data[d])||void 0===c?void 0:c.data.parent)||"")&&(d=d.split(" ")[0],o.push(t.data[d]));while(d);return o.reverse(),{metadata:{...s.data,...s.data.html?{html:`<a href="${f(s.data.html,n)}">${s.data.html}</a>`}:{}},category:[s.data.group,...o.map(t=>null==t?void 0:t.data.group).filter(t=>!!t)].filter(t=>!!t),...function({track:t,trackDbLoc:e,trackDb:a,sequenceAdapter:i}){var n;let{data:o}=t,s=o.parent||"",c=o.bigDataUrl||"",d=o.bigDataIndex||"",f=o.type||(null===(n=a.data[s])||void 0===n?void 0:n.data.type)||"",p=(o.shortLabel||"")+(c.includes("xeno")?" (xeno)":""),b=(0,r.isUriLocation)(e),y=f.split(" ")[0]||"";"bam"===y&&c.toLowerCase().endsWith("cram")&&(y="cram");let g=b?h(c,e):m(c);return"bam"===y?{type:"AlignmentsTrack",name:p,description:o.longLabel,adapter:{type:"BamAdapter",bamLocation:g,index:{location:b?u(d,`${c}.bai`,e):m(d,`${c}.bai`)}}}:"cram"===y?{type:"AlignmentsTrack",name:p,description:o.longLabel,adapter:{type:"CramAdapter",cramLocation:g,craiLocation:b?u(d,`${c}.crai`,e):m(d,`${c}.crai`),sequenceAdapter:i}}:"bigWig"===y?{type:"QuantitativeTrack",name:p,description:o.longLabel,adapter:{type:"BigWigAdapter",bigWigLocation:g}}:y.startsWith("big")?{type:"FeatureTrack",name:p,description:o.longLabel,adapter:{type:"BigBedAdapter",bigBedLocation:g}}:"vcfTabix"===y?{type:"VariantTrack",name:p,description:o.longLabel,adapter:{type:"VcfTabixAdapter",vcfGzLocation:g,index:{location:b?u(d,`${c}.tbi`,e):m(d,`${c}.tbi`)}}}:"hic"===y?{type:"HicTrack",name:p,description:o.longLabel,adapter:{type:"HicAdapter",hicLocation:g}}:(0,l.generateUnknownTrackConf)(p,y)}({track:s,trackDbLoc:e,trackDb:t,sequenceAdapter:i})}}}).filter(r.notEmpty).map(t=>({...t,trackId:`ucsc-trackhub-${(0,r.objectHash)(t)}`,assemblyNames:[a]}))}async function b(t){var e;let{pluginManager:a}=(0,r.getEnv)(t),l=(0,r.getSession)(t),h=[];try{let e=(0,n.getConf)(t,"hubTxtLocation"),r=await (0,o.openLocation)(e).readFile("utf8"),u=f(e.uri,e.baseUri),{assemblyManager:m}=l;if(r.includes("useOneFile on")){let{genome:o,tracks:c}=new i.BD(r),d=o.name,h=o.data.description;m.get(d)||l.addSessionAssembly({name:d,displayName:h,sequence:{type:"ReferenceSequenceTrack",metadata:{...o.data,...o.data.htmlPath?{htmlPath:`<a href="${f(o.data.htmlPath,u)}">${o.data.htmlPath}</a>`}:{}},trackId:`${d}-${(0,s.nanoid)()}`,adapter:{type:"TwoBitAdapter",twoBitLocation:{uri:f(o.data.twoBitPath,u)},chromSizesLocation:{uri:f(o.data.chromSizes,u)}}},...o.data.chromAliasBb?{refNameAliases:{adapter:{type:"BigBedAdapter",uri:f(o.data.chromAliasBb,u)}}}:{}});let b=m.get(d),y=(0,n.getConf)(b,["sequence","adapter"]),g=p({trackDb:c,trackDbLoc:e,assemblyName:d,sequenceAdapter:y,baseUrl:u});t.addTrackConfs(g),a.evaluateExtensionPoint("LaunchView-LinearGenomeView",{session:l,assembly:d,tracklist:!0,loc:o.data.defaultPos})}else{let a=new i.lP(r).data.genomesFile;if(!a)throw Error("genomesFile not found on hub");let o=f(e.uri,e.baseUri),s=o?{uri:f(a,o),locationType:"UriLocation"}:{localPath:a,locationType:"LocalPathLocation"},u=await c(s),b={};for(let[e,i]of Object.entries(u.data)){let r=(0,n.getConf)(t,"assemblyNames");if(r.length>0&&!r.includes(e))continue;let s=m.get(e);if(!s){h.push(e);continue}let l=i.data.trackDb;if(!l)throw Error("genomesFile not found on hub");let c=new URL(a,o),u=o?{uri:new URL(l,c).href,locationType:"UriLocation"}:{localPath:l,locationType:"LocalPathLocation"},f=await d(u),y=(0,n.getConf)(s,["sequence","adapter"]),g=p({trackDb:f,trackDbLoc:u,assemblyName:e,sequenceAdapter:y,baseUrl:o});t.addTrackConfs(g),b[e]=g.length}let y=Object.entries(b),g=y.length?`Loaded data from these assemblies: ${y.map(([t,e])=>`${t} (${e} tracks)`).join(", ")}`:"",w=h.length?`Skipped data from these assemblies: ${h.join(", ")}`:"";l.notify([g,w].filter(t=>!!t).join(". "),"success")}}catch(a){console.error(a),l.notifyError(`${(0,n.getConf)(t,"name")}: "${a}"`,a),null===(e=l.breakConnection)||void 0===e||e.call(l,t.configuration)}}},77565:function(t,e,a){a.d(e,{ve:function(){return s},lP:function(){return l},BD:function(){return c},h7:function(){return o}});class i{constructor(t=[],e){let a,i;this.data={};let{checkIndent:n=!0,skipValidation:r=!1}=e??{};for(let e of"string"==typeof t?t.trimEnd().split(/\r?\n/):t){if(""===e)throw Error("Invalid stanza, contained blank lines");if(e.trim().startsWith("#"))continue;if(e.trimEnd().endsWith("\\")){let t=e.trimEnd().slice(0,-1);i?i+=t.trimStart():i=t;continue}let t=e;if(i&&(t=i+t.trimStart(),i=void 0),a??n){let e=/^([ \t]+)/.exec(t);if(void 0===a)e?[,a]=e:a="";else if(""===a&&null!==e||a&&e&&a!==e[1])throw Error("Inconsistent indentation of stanza")}else a="";let r=t.trim(),o=r.indexOf(" ");if(-1===o){if(!this.nameKey)throw Error("First line in a stanza must have both a key and a value");if(this.data[r])continue;this.data[r]="";continue}let s=r.slice(0,o),l=r.slice(o+1);if(this.data[s]&&l!==this.data[s])throw Error(`Got duplicate key with a different value in stanza: "${s}" key has both ${this.data[s]} and ${l}`);this.nameKey||(this.nameKey=s,this.name=r.slice(o+1)),this.data[s]=l}r||this.validate()}validate(){}}class n{constructor(t=[],e){this.data={};let{checkIndent:a=!0,skipValidation:n=!1}=e??{};for(let e of"string"==typeof t?t.trimEnd().split(/(?:[\t ]*\r?\n){2,}/):t){if(""===e)throw Error("Invalid stanza, was empty");if(e.startsWith("include")||e.trim().startsWith("#")&&e.trimEnd().split(/\r?\n/).map(t=>t.trim()).every(t=>t.startsWith("#")))continue;let t=new i(e,{checkIndent:a});if(this.nameKey){if(t.nameKey!==this.nameKey)throw Error(`The first line in each stanza must have the same key. Saw both ${this.nameKey} and ${t.nameKey}`)}else this.nameKey=t.nameKey;if(!t.name)throw Error(`No stanza name: ${t.name}`);if(this.data[t.name])throw Error(`Got duplicate stanza name: ${t.name}`);this.data[t.name]=t}n||this.validate()}validate(){}}function r(t,e,a=""){let i=[];for(let a of e)t.data[a]||i.push(a);if(i.length>0)throw Error(`${a} is missing required entr${1===i.length?"y":"ies"}: ${i.join(", ")}`)}class o extends n{constructor(t,e){super(t,{...e,checkIndent:!1})}validate(){if("track"!==this.nameKey)throw Error(`trackDb has "${this.nameKey}" instead of "track" as the first line in each track`);for(let[t,e]of Object.entries(this.data)){let a=Object.keys(e.data);r(e,["track","shortLabel"],`Track ${t}`);let i=new Set(["superTrack","compositeTrack","container","view"]);if(!a.some(t=>i.has(t))){if(!a.includes("bigDataUrl"))throw Error(`Track ${t} is missing required key "bigDataUrl"`);if(!a.includes("type")&&!Object.keys(this.settings(t)).includes("type"))throw Error(`Neither track ${t} nor any of its parent tracks have the required key "type"`)}let n=t;do(n=this.data[n]?.parent)&&([n]=n.split(" "));while(n);let o=this.data[t];o&&(this.data[t]=o)}}settings(t){if(!this.data[t])throw Error(`Track ${t} does not exist`);let e=[t],a=t;do(a=this.data[a]?.parent)&&e.push(a);while(a);let i={};for(let t of(e.reverse(),e)){let e=this.data[t];if(e)for(let[t,a]of Object.entries(e))i[t]=a}return i}}class s extends n{validate(t=["genome","trackDb"]){if("genome"!==this.nameKey)throw Error('Genomes file must begin with a line like "genome <genome_name>"');for(let[e,a]of Object.entries(this.data))r(a,t,`genome ${e}`)}}class l extends i{validate(){r(this,["hub","shortLabel","longLabel","genomesFile","email"],"Hub file")}}class c{constructor(t){let[e,a,...n]=t.trimEnd().split(/(?:[\t ]*\r?\n){2,}/);this.hubData=new i(e),this.validateHub(),this.genome=new i(a),this.validateGenomeSection(),this.tracks=new o(n.join("\n\n"),{skipValidation:!1})}validateHub(){if("hub"!==this.hubData.nameKey)throw Error('Hub file must begin with a line like "hub <hub_name>"');r(this.hubData,["hub","shortLabel","longLabel","email"])}validateGenomeSection(){if("genome"!==this.genome.nameKey)throw Error('Genomes file must begin with a line like "genome <genome_name>"')}}}}]);